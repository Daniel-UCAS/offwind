<p>Here you can start/stop simulation process. When it starts, the job is submitted to CFD Processing server.
You will find a download link as soon as job finishes.
</p>

<p>
    <a class="btn btn-warning btn-large" href="@Url.Action("SimulationPreview")" id="button-preview">Preview case</a>
    <a class="btn btn-success btn-large" href="#" id="button-run">Run simulation</a>
    <a class="btn btn-danger btn-large" href="#" id="button-stop">Stop simulation</a>
    <img id="loader-gif" class="hidden" src="@Url.Content("~\\static\\img\\ajax-loader.gif")"/>
</p>
<fieldset id="processing">
    <legend>Processing</legend><br/>
    <div id="procgraph" style="width: 100%; height: 320px;"></div>
</fieldset>


@section scripts
{
    @Scripts.Render("~/static/js/amcharts.js")

    <script>
        var chart = null;
        var interval_obj = null;

        var history = [];
        var historyDepth = 0;
        var jobId = "2595da5d-364b-4c08-8b6d-81345a1869ed";
        var timeStamp = 0;
        
        function init_xy() {
            var xAxis = new AmCharts.ValueAxis();
            xAxis.position = "bottom";
            xAxis.minimum = 0;
            xAxis.title = "Time (sec)";
            xAxis.gridAlpha = 0.1;
            xAxis.autoGridCount = true;
            chart.addValueAxis(xAxis);
            // Y
            var yAxis = new AmCharts.ValueAxis();
            yAxis.position = "left";
            yAxis.gridAlpha = 0.1;
            yAxis.autoGridCount = true;
            yAxis.title = "";
            chart.addValueAxis(yAxis);            
        }

        function add_graph(title, yAxis, color)
        {
            var graph = new AmCharts.AmGraph();
            graph.xField = "x";
            graph.yField = yAxis;
            graph.lineAlpha = 1;
            graph.lineColor = color;
            graph.title = title;
            chart.addGraph(graph);
        }
                
        var visFiles = ["Time_0", "epsilon_0", "k_0", "p_0", "Ux_0", "Uy_0", "Uz_0"];
        var url = "http://proc.offwind.eu/app/read/" + jobId + "/" + timeStamp + "/" + payload;
        //var url = "http://proc.offwind.eu:59216/app/read/" + jobId + "/" + timeStamp + "/" + payload;
        
        function update_tick2() {
            var payload = "";                       
            for (var j = 0; j < visFiles.length; j++)
            {
                payload = payload + "$" + visFiles[j];
            }            

            $.ajax({
                url: url,
                dataType: "json",
                type: "GET",
                contentType: 'application/json; charset=utf-8',
                success: function(json) {
                    var length = json.length;                        
                    if (length == 0) return;
                    
                    var blocklen = [];
                    var next = 0;
                    var minblocklen = 0x8FFFFFFF;
                    for (var b = 0; b < visFiles.length; b++) {
                        blocklen[b] = parseInt(json[next][0]);
                        if (blocklen[b] < minblocklen ) {
                            minblocklen = blocklen[b];
                        }
                        next += (blocklen[b] + 1);
                        blocklen[b] = next;
                    }
                    for (var i = 1; i <= minblocklen; i++) {
                        history[timeStamp++] = {
                            x: parseFloat(json[i][0]),
                            epsilon: parseFloat(json[blocklen[0]+i][0]),
                            k: parseFloat(json[blocklen[1]+i][0]),
                            p: parseFloat(json[blocklen[2]+i][0]),
                            Ux: parseFloat(json[blocklen[3]+i][0]),
                            Uy: parseFloat(json[blocklen[4]+i][0]),
                            Uz: parseFloat(json[blocklen[5]+i][0])
                        };
                    }
                    
                    chart.dataProvider = history;
                    chart.validateData();
                    chart.write("procgraph");
                }
            });
        }

        $(document).ready(function () {
            
            var inProgress = @ViewBag.IsInProgress.ToString().ToLowerInvariant();
            
            chart = new AmCharts.AmXYChart();            
            var legend = new AmCharts.AmLegend();
            chart.addLegend(legend);

            init_xy();
            add_graph("epsilon", "epsilon", '#0000FF');
            add_graph("k", "k", '#00FF00');
            add_graph("p", "p", '#FF0000');
            add_graph("Ux", "Ux", '#FF00FF');
            add_graph("Uy", "Uy", '#FFFF00');
            add_graph("Uz", "Uz", '#00FFFF');                
                        
            if (inProgress) {
                $('#loader-gif').removeClass('hidden');
                $('#button-run').addClass('disabled');
                $('#button-stop').removeClass('disabled');
                interval_obj = setInterval(function() { update_tick2(); }, 3000);
                
            } else {
                $('#loader-gif').addClass('hidden');
                $('#button-run').removeClass('disabled');
                $('#button-stop').addClass('disabled');                
            }
            
            $('#button-run').click(function () {
                if (inProgress) return false;
                inProgress = true;
                $('#loader-gif').removeClass('hidden');
                $('#button-run').addClass('disabled');
                $('#button-stop').removeClass('disabled');
                history.length = 0;
                historyDepth = 0;
                timeStamp = 0;
                $.ajax({
                    url: "@Url.Action("SimulationStart", "Processing", new { area = "CFD" })",
                    dataType: "json",
                    type: "POST",
                    contentType: 'application/json; charset=utf-8',
                    success: function (id) {
                        jobId = id;
                        interval_obj = setInterval(function() { update_tick2(); }, 3000);
                    }
                });                
            });

            $('#button-stop').click(function () {
                if (!inProgress) return false;
                inProgress = false;
                $('#loader-gif').addClass('hidden');
                $('#button-run').removeClass('disabled');
                $('#button-stop').addClass('disabled');
                clearInterval(interval_obj);
                $.ajax({
                    url: "@Url.Action("SimulationStop", "Processing", new { area = "CFD" })",
                    dataType: "json",
                    type: "POST",
                    contentType: 'application/json; charset=utf-8',
                    success: function () {                        
                    }
                });
                
            });
        });
    </script>    
}