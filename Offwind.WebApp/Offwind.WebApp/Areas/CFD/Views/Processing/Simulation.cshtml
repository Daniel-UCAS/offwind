<p>Here you can start/stop simulation process. When it starts, the job is submitted to CFD Processing server.
You will find a download link as soon as job finishes.
</p>

<p>
    <a class="btn btn-warning btn-large" href="@Url.Action("SimulationPreview")" id="button-preview">Preview case</a>
    <a class="btn btn-success btn-large" href="#" id="button-run">Run simulation</a>
    <a class="btn btn-danger btn-large" href="#" id="button-stop">Stop simulation</a>
    <img id="loader-gif" class="hidden" src="@Url.Content("~\\static\\img\\ajax-loader.gif")"/>
</p>

<fieldset id="processing">
    <div id="simprogress">
        
    </div><br/>
    <legend id="proclabel">Processing</legend><br/>
    <div id="procgraph" style="width: 100%; height: 400px;"></div>
</fieldset>


@section scripts
{
    @Scripts.Render("~/static/js/highcharts.js")

    <script>
        var chart = null;
        var interval_obj = null;

        var visFiles = ["Time_0", "epsilon_0", "k_0", "p_0", "Ux_0", "Uy_0", "Uz_0"];
        
        var history = new Array(visFiles.length - 1);
        var historyDepth = 0;
        var jobId = "";
        var procTime  = 1;
        var timeStamp = 0;
                                
        
        function plotter(json) {
            var length = json.length;                        
            if (length == 0) return;
                    
            var blocklen = [];
            var next = 0;
            var minblocklen = 0x8FFFFFFF;
            for (var b = 0; b < visFiles.length; b++) {
                blocklen[b] = parseInt(json[next][0]);
                if (blocklen[b] < minblocklen ) {
                    minblocklen = blocklen[b];
                }
                next += (blocklen[b] + 1);
                blocklen[b] = next;
            }
            for (var a = 0; a < visFiles.length - 1; a++) {
                var t = timeStamp;
                for (var i = 1; i <= minblocklen; i++) {
                    history[a][t++] = {
                        x: parseFloat(json[i][0]),
                        y: parseFloat(json[blocklen[a] + i][0])
                    };
                }
                chart.series[a].setData(history[a]);
            }
            timeStamp += minblocklen;

            //var label = document.getElementById("proclabel");
            //label.text = "Processing " + json[minblocklen] + " = " + procTime;
        }

        
        function update_tick2() {
            var payload = "";                       
            for (var j = 0; j < visFiles.length; j++)
            {
                payload = payload + "$" + visFiles[j];
            }
            var url = "http://proc.offwind.eu/app/read/" + jobId + "/" + timeStamp + "/" + payload;            
            //var url = "http://proc.offwind.eu:59216/app/read/" + jobId + "/" + timeStamp + "/" + payload;
            
            url += "?callback=plotter";
            
            $.ajax({
                url: url,
                dataType: "jsonp",
                type: "GET",
                contentType: 'application/json; charset=utf-8'
            });
        }
        
        $(document).ready(function () {
            var inProgress = @ViewBag.IsInProgress.ToString().ToLowerInvariant();
            jobId = "@ViewBag.activeJobId";
            //procTime = parseFloat("@ViewBag.procTime");

            chart = new Highcharts.Chart({
                chart: {
                    renderTo: 'procgraph'
                },
                title: {
                    text: ''
                },
                plotOptions: {
                    series: {
                        marker: {
                            states: {
                                hover: {
                                    enabled: true,
                                    radius: 5
                                }
                            }
                        }
                    }
                },
                xAxis: {
                    min: 0,
                    title: {
                        text: 'Simulation time (sec)'
                    }
                },
                yAxis: {
                    title: {
                        text: ''
                    }
                },
                legend: {
                    layout: 'vertical',
                    align: 'right',
                    verticalAlign: 'top',
                    x: -10,
                    y: 100,
                    borderWidth: 2
                }
            });
            
            for (var i = 1; i < visFiles.length; i++)
            {
                chart.addSeries({
                    name: visFiles[i],
                    type: 'line',
                    marker: {
                        enabled: false
                    }
                });
                history[i - 1] = [];
            }
                        
            if (inProgress) {
                $('#loader-gif').removeClass('hidden');
                $('#button-run').addClass('disabled');
                $('#button-stop').removeClass('disabled');
                interval_obj = setInterval(function() { update_tick2(); }, 3000);
                
            } else {
                $('#loader-gif').addClass('hidden');
                $('#button-run').removeClass('disabled');
                $('#button-stop').addClass('disabled');                
            }
            
            $('#button-run').click(function () {
                if (inProgress) return false;
                inProgress = true;
                $('#loader-gif').removeClass('hidden');
                $('#button-run').addClass('disabled');
                $('#button-stop').removeClass('disabled');
                for (var j = 0; j < visFiles.length - 1; j++)
                {
                    history[j] = [];
                }
                historyDepth = 0;
                timeStamp = 0;
                $.ajax({
                    url: "@Url.Action("SimulationStart", "Processing", new { area = "CFD" })",
                    dataType: "json",
                    type: "POST",
                    contentType: 'application/json; charset=utf-8',
                    success: function (id) {
                        jobId = id;
                        interval_obj = setInterval(function() { update_tick2(); }, 3000);
                    }
                });
                return true;
            });

            $('#button-stop').click(function () {
                if (!inProgress) return false;
                inProgress = false;
                $('#loader-gif').addClass('hidden');
                $('#button-run').removeClass('disabled');
                $('#button-stop').addClass('disabled');
                clearInterval(interval_obj);
                $.ajax({
                    url: "@Url.Action("SimulationStop", "Processing", new { area = "CFD" })",
                    dataType: "json",
                    type: "POST",
                    contentType: 'application/json; charset=utf-8',
                    success: function () {                        
                    }
                });
                return true;
            });
        });
    </script>    
}