<p>Here you can start/stop simulation process. When it starts, the job is submitted to CFD Processing server.
You will find a download link as soon as job finishes.
</p>

<p>
    <a class="btn btn-warning btn-large" href="@Url.Action("SimulationPreview")" id="button-preview">Preview case</a>
    <a class="btn btn-success btn-large" href="#" id="button-run">Run simulation</a>
    <a class="btn btn-danger btn-large" href="#" id="button-stop">Stop simulation</a>
    <img id="loader-gif" class="hidden" src="@Url.Content("~\\static\\img\\ajax-loader.gif")"/>
</p>

<fieldset id="processing">
    <div id="simprogress">
        
    </div><br/>
    <legend id="proclabel">Idle</legend>
    <div id="procgraph" style="width: 100%; height: 500px;"></div>
</fieldset>


@section scripts
{  
    @Scripts.Render("~/static/js/highcharts.js")

    <script>
        var chart = null;
        var interval_obj = null;
        var proc_url = "http://proc.offwind.eu/app";
        var graph = ["Time_0"];
        var ignore = ["Time_0", "Separator_0", "executionTime_0"];
        var initvis = ["epsilon_0", "Ux_0", "Uy_0", "Uz_0", "p_0", "k_0"];
                        
        var history = new Array(graph.length - 1);
        var historyDepth = 0;
        var jobId = "";
        var procTime  = 1;
        var timeStamp = 0;
        var busytime = 0;
       
        function create_chart() {
            chart = new Highcharts.Chart({
                chart: {
                    renderTo: 'procgraph'
                },
                title: {
                    text: ''
                },
                plotOptions: {
                    series: {
                        marker: {
                            states: {
                                hover: {
                                    enabled: true,
                                    radius: 5
                                }
                            }
                        }
                    }
                },
                xAxis: {
                    min: 0,
                    title: {
                        text: 'Simulation time (sec)'
                    }
                },
                yAxis: {
                    title: {
                        text: ''
                    }
                },
                legend: {
                    layout: 'vertical',
                    align: 'right',
                    verticalAlign: 'top',
                    x: -10,
                    y: 0,
                    borderWidth: 2
                }
            });            
        }
        
        function graphlist(json) {
            var i;
            for (i = 0; i < json.length; i++) {
                if ($.inArray(json[i], ignore) < 0) {
                    graph.push(json[i]);
                }
            }
            if (graph.length == 1) return;
            graph.push("executionTime_0");
            for (i = 1; i < graph.length - 1; i++) {
                chart.addSeries({
                    name: graph[i],
                    visible: ($.inArray(graph[i], initvis) < 0) ? false : true,
                    type: 'line',
                    marker: {
                        enabled: false
                    }
                });
                history[i - 1] = [];
            }
        }
                                        
        function plotter(json) {
            var length = json.length;                        
            if (length == 0) return;
                    
            var blocklen = [];
            var next = 0;
            var minblocklen = 0x8FFFFFFF;

            for (var b = 0; b < graph.length; b++) {
                blocklen[b] = parseInt(json[next][0]);
                if (blocklen[b] < minblocklen ) {
                    minblocklen = blocklen[b];
                }
                next += (blocklen[b] + 1);
                blocklen[b] = next;
            }
            for (var a = 0; a < graph.length - 2; a++) {
                var t = timeStamp;
                for (var i = 1; i <= minblocklen; i++) {
                    history[a][t++] = {
                        x: parseFloat(json[i][0]),
                        y: parseFloat(json[blocklen[a] + i][0])
                    };
                }
                chart.series[a].setData(history[a]);
            }
                        
            timeStamp += minblocklen;
            if (minblocklen != 0) {
                //var label = document.getElementById("proclabel");                               
                var progress = parseFloat(json[minblocklen][0]) / parseFloat(procTime) * 100.0;
                var simclock = parseFloat(json[blocklen[graph.length - 2] + minblocklen][0]);

                var text = "Processing stage " + progress.toFixed(1) + "%";
                if (1) { //busytime > 0) {
                    function pad2(num, tail) {
                        var s = num + "";
                        if (s.length < 1 ) s = "0" + s;
                        return s + tail;
                    }
                    var elapsed = simclock;// - busytime;
                    elapsed = elapsed * 100.0 / progress;
                    var hours = Math.floor(elapsed / 3600);
                    elapsed -= (hours * 3600);
                    var minutes = Math.floor(elapsed / 60);
                    elapsed -= (minutes * 60);
                    text += ", estimated time ";
                    text += pad2(hours, "h ");
                    text += pad2(minutes, "m ");
                    text += pad2(elapsed.toFixed(0), "s");                    
                }
                busytime = 0;//simclock;
                //label.firstChild.data = text;
                $('#proclabel').text(text);
            }
        }
        
        function update_tick2() {
            var payload = "";
            var url = "";
            if (graph.length == 1) {
                url = proc_url + "/list/" + jobId + "/?callback=graphlist";
                $.ajax({
                    url: url,
                    dataType: "jsonp",
                    type: "GET",
                    contentType: 'application/json; charset=utf-8'
                });
                return;
            }
            for (var j = 0; j < graph.length; j++) {
                payload = payload + "$" + graph[j];
            }
            url = proc_url + "/read/" + jobId + "/" + timeStamp + "/" + payload;            
            url += "?callback=plotter";            
            $.ajax({
                url: url,
                dataType: "jsonp",
                type: "GET",
                contentType: 'application/json; charset=utf-8'
            });
        }
        
        $(document).ready(function () {
            var inProgress = @ViewBag.IsInProgress.ToString().ToLowerInvariant();
            jobId = "@ViewBag.activeJobId";
            procTime = parseFloat("@ViewBag.procTime");

            create_chart();

            if (inProgress) {
                $('#loader-gif').removeClass('hidden');
                $('#button-run').addClass('disabled');
                $('#button-stop').removeClass('disabled');
                $('#proclabel').text('Establish connection');
                interval_obj = setInterval(function() { update_tick2(); }, 3000);
                
            } else {
                $('#loader-gif').addClass('hidden');
                $('#button-run').removeClass('disabled');
                $('#button-stop').addClass('disabled');
                $('#proclabel').text('Idle');
            }
            
            $('#button-run').click(function () {
                if (inProgress) return false;
                inProgress = true;
                $('#loader-gif').removeClass('hidden');
                $('#button-run').addClass('disabled');
                $('#button-stop').removeClass('disabled');
                $('#proclabel').text('Establish connection');
                
                for (var j = 0; j < graph.length - 2; j++)
                {
                    history[j] = [];
                }
                historyDepth = 0;
                timeStamp = 0;
                $.ajax({
                    url: "@Url.Action("SimulationStart", "Processing", new { area = "CFD" })",
                    dataType: "json",
                    type: "POST",
                    contentType: 'application/json; charset=utf-8',
                    success: function (json) {
                        jobId = json[0];
                        procTime = parseFloat(json[1]);
                        interval_obj = setInterval(function() { update_tick2(); }, 3000);
                    }
                });
                return true;
            });

            $('#button-stop').click(function () {
                if (!inProgress) return false;
                inProgress = false;
                $('#loader-gif').addClass('hidden');
                $('#button-run').removeClass('disabled');
                $('#button-stop').addClass('disabled');
                $('#proclabel').setText('Idle');
                clearInterval(interval_obj);
                $.ajax({
                    url: "@Url.Action("SimulationStop", "Processing", new { area = "CFD" })",
                    dataType: "json",
                    type: "POST",
                    contentType: 'application/json; charset=utf-8',
                    success: function () {                        
                    }
                });
                return true;
            });
        });
    </script>    
}