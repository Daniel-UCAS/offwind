@section styles
{
    @Styles.Render("~/static/css/jquery.handsontable.full.css")
}

@section scripts
{    @Scripts.Render("~/static/js/jquery.handsontable.full.js")
     @Scripts.Render("~/static/js/handsontable.tools.js")
    <script language="javascript">

        var $body = [$("#time"), $("#gradient"), $("#divergence"), $("#laplacian"),
            $("#interpolation"), $("#sngrad"), $("#flux")];        
        var ddtTypes = ["Euler", "localEuler", "CrankNicholson", "backward", "steadyState"];
        var discretisationTypes = ["none" ,"Gauss", "leastSquares", "fourth"];
        var interpolationTypes = ["none", "linear", "cubicCorrection", "midPoint",
            "upwind", "linearUpwind", "skewLinear",
            "filteredLinear2", "limitedLinear", "vanLeer", "MUSCL",
            "limitedCubic", "SFCD", "Gamma", "limitedLinearV"];
        var snGradTypes = ["none", "corrected",  "uncorrected", "limited", "bounded", "fourth"];

        var ddtTemplate = ["default", ddtTypes[0]];
        var grdTemplate = ["default", discretisationTypes[0], interpolationTypes[0]];
        var divTemplate = ["default", discretisationTypes[0], interpolationTypes[0], "0"];
        var lapTemplate = ["default", discretisationTypes[0], interpolationTypes[0], snGradTypes[0]];
        var intTempalte = ["default", interpolationTypes[0], "0"];
        var sngTemplate = ["default", snGradTypes[0]];
        var flxTempalte = ["default", false];

        var commTemplate = [
            ddtTemplate,
            grdTemplate,
            divTemplate,
            lapTemplate,
            intTempalte,
            sngTemplate,
            flxTempalte
        ];
                               
        $(document).ready(function () {
            
            var isInitialize = [false, false, false, false, false, false, false];            

            var dataloaded = function(res, id) {
                $body[id].data('handsontable').loadData(res);
                isInitialize[id] = true;
            };

            var applychanges = function(change, id) {
                if (!isInitialize[id]) return;
                
                if ((change.length == 0) || (change[0][2] == change[0][3])) return;
                
                var d = $body[id].data('handsontable').getData();
                var url = "/CFD/SystemControls/VSchemeSetData/" + id;
                $.ajax({
                    url: url,
                    dataType: "json",
                    type: "POST",
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify(d)
                });
            };
            
            $body[0].handsontable({
                startRows: 1,
                startCols: 2,
                columns: [
                    { type: { renderer: td_renderer} },
                    { type: Handsontable.AutocompleteCell, source: ddtTypes, editor: Handsontable.AutocompleteEditor, strict: true } ],
                colHeaders: [
                    "<b>Function</b>",
                    "<b>Type</b>"
                ],
                rowHeaders: true,
                contextMenu: true,
                minSpareRows: 1,
                
                onBeforeChange: function (value) {
                    return td_before_change(value, $body[0], commTemplate[0]);
                },
                onChange: function (change, source) {
                    applychanges(change, 0);
                }
                
            });
            $body[1].handsontable({
                startRows: 1,
                startCols: 3,
                columns: [
                    { type: { renderer: td_renderer} },
                    { type: Handsontable.AutocompleteCell, source: discretisationTypes, editor: Handsontable.AutocompleteEditor, strict: true },
                    { type: Handsontable.AutocompleteCell, source: interpolationTypes, editor: Handsontable.AutocompleteEditor, strict: true } ],
                colHeaders: [
                    "<b>Function</b>",
                    "<b>Discretisation</b>",
                    "<b>Interpolation</b>"
                ],
                rowHeaders: true,
                minSpareRows: 1,
                contextMenu: true,
                onBeforeChange: function (value) {
                    return td_before_change(value, $body[1], commTemplate[1]);
                },
                onChange: function (change, source) {
                    applychanges(change, 1);
                }
            });
            $body[2].handsontable({
                startRows: 1,
                startCols: 4,
                columns: [
                    { type: { renderer: td_renderer} },
                    { type: Handsontable.AutocompleteCell, source: discretisationTypes, editor: Handsontable.AutocompleteEditor, strict: true },
                    { type: Handsontable.AutocompleteCell, source: interpolationTypes, editor: Handsontable.AutocompleteEditor, strict: true },
                    { type: { renderer: td_renderer}}],
                colHeaders: [
                    "<b>Function</b>",
                    "<b>Discretisation</b>",
                    "<b>Interpolation</b>",
                    "<b>Psi</b>"
                ],
                rowHeaders: true,
                minSpareRows: 1,
                contextMenu: true,
                onBeforeChange: function (value) {
                    return td_before_change(value, $body[2], commTemplate[2]);
                },                
                onChange: function (change, source) {
                    applychanges(change, 2);
                }
            });            
            $body[3].handsontable({
                startRows: 1,
                startCols: 4,
                columns: [
                    { type: { renderer: td_renderer} },
                    { type: Handsontable.AutocompleteCell, source: discretisationTypes, editor: Handsontable.AutocompleteEditor, strict: true },
                    { type: Handsontable.AutocompleteCell, source: interpolationTypes, editor: Handsontable.AutocompleteEditor, strict: true },
                    { type: Handsontable.AutocompleteCell, source: snGradTypes, editor: Handsontable.AutocompleteEditor, strict: true }],
                colHeaders: [
                    "<b>Function</b>",
                    "<b>Discretisation</b>",
                    "<b>Interpolation</b>",
                    "<b>snGrad</b>"
                ],
                rowHeaders: true,
                minSpareRows: 1,
                contextMenu: true,
                onBeforeChange: function (value) {
                    return td_before_change(value, $body[3], commTemplate[3]);
                },                
                onChange: function (change, source) {
                    applychanges(change, 3);
                }
            });
            $body[4].handsontable({
                startRows: 1,
                startCols: 3,
                columns: [
                    { type: { renderer: td_renderer} },
                    { type: Handsontable.AutocompleteCell, source: interpolationTypes, editor: Handsontable.AutocompleteEditor, strict: true },
                    { type: { renderer: td_renderer}}],
                colHeaders: [
                    "<b>Function</b>",
                    "<b>Interpolation</b>",
                    "<b>Psi</b>"
                ],
                rowHeaders: true,
                minSpareRows: 1,
                contextMenu: true,
                onBeforeChange: function (value) {
                    return td_before_change(value, $body[4], commTemplate[4]);
                },                
                onChange: function (change, source) {
                    applychanges(change, 4);
                }
            });
            $body[5].handsontable({
                startRows: 1,
                startCols: 2,
                columns: [
                    { type: { renderer: td_renderer} },
                    { type: Handsontable.AutocompleteCell, source: snGradTypes, editor: Handsontable.AutocompleteEditor, strict: true }],
                colHeaders: [
                    "<b>Function</b>",
                    "<b>Type</b>"
                ],
                rowHeaders: true,
                minSpareRows: 1,
                contextMenu: true,
                onBeforeChange: function (value) {
                    return td_before_change(value, $body[5], commTemplate[5]);
                },                
                onChange: function (change, source) {
                    applychanges(change, 5);
                }
            });
            $body[6].handsontable({
                startRows: 1,
                startCols: 2,
                columns: [
                    { type: { renderer: td_renderer} },
                    { type: Handsontable.CheckboxCell }],
                colHeaders: [
                    "<b>Name</b>",
                    "<b>Generate</b>"
                ],
                rowHeaders: true,
                minSpareRows: 1,
                contextMenu: true,
                onBeforeChange: function (value) {
                    return td_before_change(value, $body[6], commTemplate[6]);
                },                
                onChange: function (change, source) {
                    applychanges(change, 6);
                }
            });

            $.ajax({                    
                url: "@Url.Action("VSchemeGetData", "SystemControls", new { area = "CFD", id = 0 })",
                dataType: 'json',
                type: 'GET',
                success: function(res) {
                    dataloaded(res, 0);
                }
            });
            $.ajax({                    
                url: "@Url.Action("VSchemeGetData", "SystemControls", new { area = "CFD", id = 1 })",
                dataType: 'json',
                type: 'GET',
                success: function(res) {
                    dataloaded(res, 1);
                }
            });
            $.ajax({                    
                url: "@Url.Action("VSchemeGetData", "SystemControls", new { area = "CFD", id = 2 })",
                dataType: 'json',
                type: 'GET',
                success: function(res) {
                    dataloaded(res, 2);
                }
            });
            $.ajax({                    
                url: "@Url.Action("VSchemeGetData", "SystemControls", new { area = "CFD", id = 3 })",
                dataType: 'json',
                type: 'GET',
                success: function(res) {
                    dataloaded(res, 3);
                }
            });
            $.ajax({                    
                url: "@Url.Action("VSchemeGetData", "SystemControls", new { area = "CFD", id = 4 })",
                dataType: 'json',
                type: 'GET',
                success: function(res) {
                    dataloaded(res, 4);
                }
            });
            $.ajax({                    
                url: "@Url.Action("VSchemeGetData", "SystemControls", new { area = "CFD", id = 5 })",
                dataType: 'json',
                type: 'GET',
                success: function(res) {
                    dataloaded(res, 5);
                }
            });
            $.ajax({                    
                url: "@Url.Action("VSchemeGetData", "SystemControls", new { area = "CFD", id = 6 })",
                dataType: 'json',
                type: 'GET',
                success: function(res) {
                    dataloaded(res, 6);
                }
            });
            
        });
    </script>
}

<form class="form-horizontal" method="post">
    <fieldset id = "time">
        <legend><b>Time scheme</b></legend><br/>
    </fieldset><br/>

    <fieldset id = "gradient">
        <legend><b>Gradient scheme</b></legend><br/>
    </fieldset><br/>
    
    <fieldset id = "interpolation">
        <legend><b>Interpolation scheme</b></legend><br/>
    </fieldset><br/>
    
    <fieldset id = "laplacian">
        <legend><b>Laplacian scheme</b></legend><br/>
    </fieldset><br/>

    <fieldset id = "divergence">
        <legend><b>Divergence scheme</b></legend><br/>
    </fieldset><br/>

    <fieldset id = "sngrad">
        <legend><b>Surface Normal Gradient scheme</b></legend><br/>
    </fieldset><br/>

    <fieldset id = "flux">
        <legend><b>Flux calculation</b></legend><br/>
    </fieldset><br/>
    
    <div class="form-actions">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn">Cancel</button>
    </div>

</form>
