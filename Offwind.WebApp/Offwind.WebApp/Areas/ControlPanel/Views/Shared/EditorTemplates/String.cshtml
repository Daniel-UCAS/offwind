@model object
@{
    var fieldName = ViewData.TemplateInfo.HtmlFieldPrefix;
    var displayName = ViewData.ModelMetadata.DisplayName ?? ViewData.TemplateInfo.HtmlFieldPrefix;
    var description = ViewData.ModelMetadata.Description;
}
<div class="control-group" id="@("EditorFor_" + fieldName)">
    <label class="control-label" for="@fieldName">@displayName </label>
    <span class="help-block">@description</span>
@if (Model is Enum)
{
    var enumType = Model.GetType();
    Output.Write("<div class=\"controls\">");
    if (ViewData.ModelMetadata.IsReadOnly)
    {
        Output.Write("<select disabled=\"\" id=\"{0}\" name=\"{0}\">", fieldName);
    }
    else
    {
        Output.Write("<select id=\"{0}\" name=\"{0}\">", fieldName);
    }
    foreach (var t in Enum.GetNames(enumType))
    {
        if (t == Model.ToString())
        {
            <option value="@t" selected="@t">@t</option>
        }
        else
        {
            <option value="@t">@t</option>
        }
    }
    Output.Write("</select>");
    Output.Write("</div>");
}
else
{
    Output.Write("<div class=\"controls\">");
    if (ViewData.ModelMetadata.IsReadOnly)
    {
        Output.Write("<input type=\"text\" class=\"span12\" id=\"{0}\" name=\"{0}\" placeholder=\"{1}\" value=\"{2}\" autocomplete=\"off\" disabled=\"disabled\"/>",
                     fieldName, ViewData.ModelMetadata.NullDisplayText, Model);
    }
    else
    {
        Output.Write("<input type=\"text\" class=\"span12\" id=\"{0}\" name=\"{0}\" placeholder=\"{1}\" value=\"{2}\" autocomplete=\"off\"/>",
                     fieldName, ViewData.ModelMetadata.NullDisplayText, Model);        
    }
    Output.Write("</div>");
}
</div>
