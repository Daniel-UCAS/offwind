@model Offwind.WebApp.Areas.EngineeringTools.Models.WakeSimulation2New.VNowcastingProperties

<ul class="breadcrumb">
    <li><a href="@Url.Action("Index", "Home", new { area = "" })"><i class="icon-home"></i></a> <span class="divider">/</span></li>
    <li><a href="@Url.Action("Index", "EngineeringTools", new { area = "EngineeringTools" })">Engineering Tools</a> <span class="divider">/</span></li>
    <li>Wind Farm Control</li>
</ul>

<!--<div>
    <a href="@Url.Action("Results", "WakeSimulation2New", new { area = "EngineeringTools" })">&lt;&lt;&nbsp;To simulation results</a>
</div>-->

@section styles
{
    <style type="text/css">
        .alert-warning {
          color: #996633;
          background-color: #ffffcc;
          border-color: #996633;
        }
    </style>
}

<div class="row-fluid row-content-block">
    <div class="span12 well">
        <div class="fancy-tab-container">
            <ul class="nav nav-tabs fancy">
                <li class="active"><a href="#parameters" data-toggle="tab">Parameters</a></li>
                <li><a href="#results" data-toggle="tab">Results</a></li>
            </ul>
            <div class="tab-content">
                <div class="tab-pane active" id="parameters">
                    <form class="form-horizontal" method="post">
                        <br />
                        <fieldset>
                            @Html.EditorFor(m => m.Method)
                            @Html.EditorFor(m => m.TimeForStarting)
                            @Html.EditorFor(m => m.Decimation)
                            @Html.EditorFor(m => m.SamplingTime)
                        </fieldset>

                        <div class="form-actions">
                            <button type="submit" class="btn btn-primary@(Model.WasWakeSimulationPerformed ? string.Empty : " disabled")"@(Model.WasWakeSimulationPerformed ? string.Empty : "disabled=\"disabled\"")>Run</button>
                        </div>
                        <div id="alert-error" class="alert alert-error@(Model.WasWakeSimulationPerformed ? " hidden" : string.Empty)" style="margin: 20px;">
                            Wake Simulation has not been performed yet. To run Nowcasting Simulation please <a href="@Url.Action("Simulation", "WakeSimulation2New", new { area = "EngineeringTools" })">run</a> Wake Simulation first.
                        </div>
                    </form>
                </div>
                <div class="tab-pane" id="results">
                    <div class="chart" id="nowcastingChart" style="width: 100px; height: 560px;"></div>
                    <div id="alert-warnings" class="alert alert-warning hidden" style="margin: 20px;">
                        Warnings:
                        <a class="close" data-dismiss="alert">×</a>
                        <div></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    @Scripts.Render("~/static/Highcharts-3.0.4/highcharts.js")

    <script type="text/javascript">
        $(document).ready(function () {
            $('#SamplingTime').attr('readonly', 'readonly').attr('disabled', 'disabled');

            $('#alert-warnings').bind('close', function () {
                $('#alert-warnings').fadeOut();
                return false;
            });

            function formatNumber(value, digitsAfterPointNumber) {
                var powerOfTen = Math.pow(10, digitsAfterPointNumber);
                formattedValueString = String(Math.round(value * powerOfTen) / powerOfTen);
                return formattedValueString;
            }

            $.ajax({
                url: "@Url.Action("GetNowcastingSimulationResults", "WakeSimulation2New", new { area = "EngineeringTools" })",
                dataType: 'json',
                type: 'GET',
                success: function (res) {
                    if (!res) return;
                    var data = res.data;

                    if (data == null) {
                        return;
                    }

                    var warningMessages = res.warningMessages;
                    if (warningMessages != null && warningMessages.length >= 1) {
                        $('#alert-warnings div').empty();
                        $('#alert-warnings div').append('<ul />');
                        for (var i = 0; i < warningMessages.length; i++) {
                            $('#alert-warnings ul').append('<li>' + warningMessages[i] + '</li>')
                        }
                        $('#alert-warnings').removeClass('hidden').hide().fadeIn();
                    }

                    var w = $('.tab-content').width();
                    $('.chart').width(w);
                    show_graph(data);
                    $('[href="#results"]').click();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    if (typeof (console) !== 'undefined' && console.debug != null) {
                        console.debug(jqXHR, textStatus, errorThrown);
                    }
                },
                complete: function (jqXHR, textStatus) {
                }
            });
        });
        
        function show_graph(data) {
            var colors = [ '#000000', '#FF0000', '#00FF00', '#0000FF' ];
            var place = "nowcastingChart";
            var method = data.Method;
            var title = "Nowcasting with " + method + " model based on total wind farm power, Offwind simulation";
            var time = data.Time;
            var x = data.X;
            var xhmsAll = data.XhmsAll;
            var xhmsAllTimeOffset = data.XhmsAllTimeOffset;
            var xhmsLLength = data.XhmsLLength;
            var xhmsUOffset = data.XhmsUOffset;
            var series_titles = [ 'x', 'xhmsL', 'xhms', 'xhmsU' ];

            var chart = new Highcharts.Chart({
                chart: {
                    renderTo: place
                },
                title: {
                    text: title
                },
                xAxis: {
                    min: 0,
                    title: {
                    }
                },
                yAxis: {
                    title: {
                    }
                },
                legend: {
                    enabled: true,
                    maxHeight: 80
                }
            });
            chart.showLoading('Loading data...');
            var skip = function(jx) {
                return false;
            };
            if (time.length > 900) {
                var step = Math.ceil(time.length / 1000);
                skip = function(jx) {
                    if (jx == 0) return false;
                    if (jx % step != 0) {
                        return true;
                    }
                    return false;
                };
            }

            {
                var i = 0;
                var func = [];
                for (var j = 0; j < time.length; j++) {
                    if (skip(j)) continue;
                    func.push({
                        x: time[j],
                        y: x[j]
                    });
                }
                var series = chart.addSeries({
                    type: 'line',
                    name: series_titles[i],
                    shadow: false,
                    lineWidth: 1,
                    color: colors[i % colors.length],
                    marker: {
                        enabled: false
                    }
                }, false);
                series.setData(func, false);
            }

            var dashStyles = [ 'Solid', 'Dash', 'Dot' ];
            var xhmsBounds = [ [ 0, xhmsLLength - 1 ], [ xhmsLLength, xhmsUOffset - 1 ], [ xhmsUOffset, xhmsAll.length - 1 ] ];
            for (var segmentIndex = 0; segmentIndex <= 2; segmentIndex++) {
                for (var lineIndex = 0; lineIndex <= 2; lineIndex++) {
                    func = [ ];
                    for (var timePointIndex = xhmsBounds[segmentIndex][0]; timePointIndex <= xhmsBounds[segmentIndex][1]; timePointIndex++) {
                        //if (skip(xhmsAllTimeOffset + timePointIndex)) continue;
                        func.push({
                            x: time[xhmsAllTimeOffset + timePointIndex],
                            y: xhmsAll[timePointIndex][lineIndex]
                        });
                    }
                    var series = chart.addSeries({
                        type: 'line',
                        name: series_titles[1 + lineIndex],
                        showInLegend: (segmentIndex == 0),
                        shadow: false,
                        dash: dashStyles[segmentIndex],
                        lineWidth: 1,
                        color: colors[(1 + lineIndex) % colors.length],
                        marker: {
                            enabled: false
                        }
                    }, false);
                    series.setData(func, false);
                }
            }

            chart.redraw();
            chart.hideLoading();
        }
    </script>
}
