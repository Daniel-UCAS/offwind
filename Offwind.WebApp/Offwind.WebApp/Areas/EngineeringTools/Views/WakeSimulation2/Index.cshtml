@model Offwind.WebApp.Areas.EngineeringTools.Models.WakeSimulation2.VGeneralProperties

<ul class="breadcrumb">
    <li><a href="@Url.Action("Index", "Home", new { area = "" })"><i class="icon-home"></i></a> <span class="divider">/</span></li>
    <li><a href="@Url.Action("Index", "EngineeringTools", new { area = "EngineeringTools" })">Engineering Tools</a> <span class="divider">/</span></li>
    <li>WakeSimulation II</li>
</ul>

<div id="alert-saved"  class="alert alert-success hidden" style="width: 10%">
    <a class="close" data-dismiss="alert">×</a>
    Saved
</div>
<div class="row-fluid row-content-block">
    <div class="span12 well">
        <form class="form-horizontal" method="post">
            <fieldset>
                <legend>Simulation behavior</legend>
                @Html.EditorFor(m => m.StartTime)
                @Html.EditorFor(m => m.StopTime)
                @Html.EditorFor(m => m.TimeStep)
            </fieldset>
            <fieldset>
                <legend>Wind farm configuration</legend>
                
                <div class="control-group">
                    <label class="control-label">Select WindFarm</label>
                    <div class="controls">
                        <select class="input-xlarge" id="windfarmsel" onchange="windfarm_change();">
                        </select>
                        <a href="@Url.Action("WindFarmInfo", "WakeSimulation2", new { area = "EngineeringTools" })" class="btn btn-info">View details</a>
                    </div>
                </div>
                <!-- @Html.EditorFor(m => m.Rho) -->
            </fieldset>
            
            <div class="form-actions">
                <button type="submit" class="btn btn-primary">Run</button>
                <button type="button" class="btn">Cancel</button>
            </div>
            
            <div id="simResult" class="hidden">
                
                <div class="span12 well" style="margin-left: 0pt">
                    <div id="rotorSpeed" style="width: 100%; height: 400px;"></div>
                </div>
                <div class="span12 well" style="margin-left: 0pt">
                    <div id="bladePitchAngle" style="width: 100%; height: 400px;"></div>
                </div>

                <div class="span12 well" style="margin-left: 0pt">
                    <div id="turbinePowerReference" style="width: 100%; height: 400px;"></div>
                </div>
                <div class="span12 well" style="margin-left: 0pt">
                    <div id="availablePower" style="width: 100%; height: 400px;"></div>
                </div>

                <div class="span12 well" style="margin-left: 0pt">
                    <div id="windSpeed" style="width: 100%; height: 400px;"></div>
                </div>
                <div class="span12 well" style="margin-left: 0pt">
                    <div id="totalFarmPower" style="width: 100%; height: 400px;"></div>
                </div>

                <div class="span12 well" style="margin-left: 0pt">
                    <div id="totalPower" style="width: 100%; height: 400px;"></div>
                </div>
                <div class="span12 well" style="margin-left: 0pt">
                    <div id="powerProduced" style="width: 100%; height: 400px;"></div>
                </div>
            </div>            
        </form>
    </div>
</div>

@section scripts
{
    @Scripts.Render("~/static/Highcharts-3.0.4/highcharts.js")

    <script type="text/javascript">
        $(document).ready(function () {            
            $.ajax({
                url: "@Url.Action("GetAvailWinFarms", "WakeSimulation2", new { area = "EngineeringTools" })",
                dataType: 'json',
                type: 'GET',
                success: function(res) {
                    var lbox = document.getElementById("windfarmsel");
                    for (var i = 0; i < res.length-1; i++) {
                        var opt = document.createElement("option");
                        opt.label = res[i];
                        lbox.appendChild(opt);
                    }
                    lbox.selectedIndex = parseInt(res[i]);
                    windfarm_change();
                }
            });

            $.ajax({
                url: "@Url.Action("GetSimulationResults", "WakeSimulation2", new { area = "EngineeringTools" })",
                dataType: 'json',
                type: 'GET',
                success: function(res) {
                    if (res != null) {
                        $("#simResult").removeClass("hidden");
                        show_graph(res, "rotorSpeed", "Rotor Speed", "", "", 1);
                        show_graph(res, "bladePitchAngle", "Blade pitch angle", "", "", 2);
                        show_graph(res, "turbinePowerReference", "Individual turbine power reference", "", "", 3);
                        show_graph(res, "availablePower", "Available power", "", "", 6);
                        show_graph(res, "windSpeed", "Wind speed", "", "", 0);
                        
                        /*
                        show_graph(res, "rotorSpeed", "Total farm power", "", "", 1);
                        show_graph(res, "rotorSpeed", "Total power", "", "", 1);
                        show_graph(res, "rotorSpeed", "Total power produced", "", "", 1);
                        */
                    }
                }
            });
        });
        
        function windfarm_change() {            
            var list = document.getElementById("windfarmsel");
            var url = "/EngineeringTools/WakeSimulation2/WindFarmSelected/" + list.selectedIndex;
            $.ajax({
                url: url,
                dataType: 'json',
                type: 'POST',
                success: function() {                    
                }
            });
        };
        
        function show_graph(data, place, title, x_title, y_title, pos) {
            var nturbines = (data[0][0].length - 7) / 10;
            var chart = new Highcharts.Chart({
                chart: {
                    renderTo: place
                },
                title: {
                    text: title
                },
                xAxis: {
                    min: 0,
                    title: {
                        text: x_title
                    }
                },
                yAxis: {
                    title: {
                        text: y_title
                    }
                },
                legend: {
                    enabled: false
                }
            });
            //chart.showLoading('Loading data...');
            var shift = pos * nturbines + 1;
            for (var i = 0; i < nturbines; i++)
            {
                var func = [];
                for (var j = 0; j < data.length; j++) {
                    func[j] = {
                        x: data[j][0][0],
                        y: data[j][0][shift + i]
                    };
                }
                var series = chart.addSeries({
                    type: 'line',
                    shadow: false,
                    lineWidth: 2,
                    marker: {
                        enabled: false
                    }
                }, false);
                series.setData(func, false);
            }
            chart.redraw();
            //chart.hideLoading();
        }
    </script>
}
