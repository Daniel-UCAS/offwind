@using Offwind.WebApp.Areas.EngineeringTools.Models.MesoWind
@model DbSettings

<style>
    #map_container
    {
        padding: 4px;
    }
    .modal-body p
    {
        margin-left: 12px;
    }
    .cluster_sample
    {
        background-image: url("/static/img/m3.png");
        background-position: 0px 0px;
        height: 66px;
        line-height: 66px;
        width: 66px;
        text-align: center;
        cursor: pointer;
        color: black;
        font-size: 11px;
        font-family: Arial,sans-serif;
        font-weight: bold;
        display: inline-block;
    }
    form
    {
        margin: 0;
    }
</style>
<ul class="breadcrumb">
    <li><a href="@Url.Action("Index", "Home", new { area = "" })"><i class="icon-home"></i></a> <span class="divider">/</span></li>
    <li><a href="@Url.Action("Index", "EngineeringTools", new { area = "EngineeringTools" })">Engineering Tools</a> <span class="divider">/</span></li>
    <li>Meso Wind <span class="divider">/</span></li>
    <li>Database</li>
</ul>

<div class="row-fluid">
    <div class="span9">
        <div class="well">
            <div id="map_container">
                <div id="map_canvas" style="width: auto; height: 410px;"></div>
            </div>
        </div>
    </div>
    <div class="span3">
        <div class="well">
            <form action="DatabaseSwitch">
                @{
                    var dbAllChecked = Model.DbType == DbType.All ? "checked" : "";
                    var dbFNLChecked = Model.DbType == DbType.FNL ? "checked" : "";
                    var dbMERRAChecked = Model.DbType == DbType.MERRA ? "checked" : "";
                }
                <label class="radio">
                    <input type="radio" name="DbType" value="0" @dbAllChecked> All (@ViewBag.TotalCount)
                </label>
                <label class="radio">
                    <input type="radio" name="DbType" value="1" @dbFNLChecked> FNL (@ViewBag.FnlCount)
                </label>
                <label class="radio">
                    <input type="radio" name="DbType" value="2" @dbMERRAChecked> MERRA (@ViewBag.MerraCount)
                </label>
            </form>
        </div>
        
        <div class="well">
            <a href="#show_db" role="button" class="btn btn-block" data-toggle="modal"><i class="icon-table"></i> Show data</a>
            <a href="#show_settings" role="button" class="btn btn-block" data-toggle="modal"><i class="icon-search"></i>Search</a>
            <a href="#show_help" role="button" class="btn btn-block" data-toggle="modal"><i class="icon-question-sign"></i>Help</a>
        </div>
    </div>
</div>

<div id="show_settings" class="modal hide fade">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3>Search</h3>
    </div>
    <div class="modal-body">
        <form class="form-horizontal indent" method="post">
            @Html.EditorFor(m => m.showAll)
            @Html.EditorFor(m => m.startLng)
            @Html.EditorFor(m => m.startLat)
            @Html.EditorFor(m => m.distance)
            <div style="text-align: center">
            </div>
        </form>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="do_search">Search</button>
    </div>
</div>

<div id="show_db" class="modal hide fade">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3>Data</h3>
    </div>
    <div class="modal-body">

        <table id="database" class="table table-condensed table-hover table-bordered">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Lat. (&#176;)</th>
                    <th>Lng. (&#176;)</th>
                    <th>DB</th>
                </tr>
            </thead>
        </table>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="do_import">Import Selected</button>
    </div>
</div>

<div id="show_help" class="modal hide fade">
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
        <h3>Help</h3>
    </div>
    <div class="modal-body">
        <h5>Overview</h5>
        <p>On this page you can work with points in databases. View, search and import them by using map or Search dialog.</p>
        <h5>Clusters</h5>
        <p>Due to some technical restrictions, all points are not shown at once
            (doing that will severely load your browser). Instead, these points are grouped into clusters.
            Cluster shows a number of points it contains and it's size and density visually changes
            depending on current map scaling.
        </p>
        <p><div class="cluster_sample">119</div> - this is an example of cluster that has 119 points grouped in it.</p>
        <h5>Points</h5>
        <p>Points - are the basic units that database contain. It directly corresponds to a physical location on earth defined by
        coordinates - Latitude and Longitude.</p>
        <p><img src="https://maps.gstatic.com/mapfiles/ms2/micons/yellow-dot.png" /> - this is an example of point.</p>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn" data-dismiss="modal">Close</button>
    </div>

</div>

@section scripts
{
    <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"></script>
    <script type="text/javascript" charset="utf8" src="http://ajax.aspnetcdn.com/ajax/jquery.dataTables/1.9.4/jquery.dataTables.min.js"></script>
    <script type="text/javascript" src="../../../../static/js/markerclusterer.js"></script>

    @Scripts.Render("~/static/js/jquery.dataTables.Pagination.js")
    <script language="javascript">
        var MapManager = { };
        var TableManager = { };

        (function() {
            var map;
            var clusters = null;
            var dbMarker;
            var dbHoverMarker;
            var centerPoint = new google.maps.LatLng(11, 50);

            var image = new google.maps.MarkerImage(
                '@Url.Content("~/static/img/marker.png")',
                new google.maps.Size(50, 60),
                new google.maps.Point(0, 0),
                new google.maps.Point(25, 60)
            );

            var shadow = new google.maps.MarkerImage(
                '@Url.Content("~/static/img/marker-shadow.png")',
                new google.maps.Size(84, 60),
                new google.maps.Point(0, 0),
                new google.maps.Point(25, 60)
            );

            function createMarker (point, icon) {
                return new google.maps.Marker({
                    position: point,
                    draggable: true,
                    raiseOnDrag: false,
                    icon: icon,
                    title: 'Sample',
                    map: map
                });
            }

            function createClusterItem(dbItem, place) {
                var marker = new google.maps.Marker({
                    position: place,
                    draggable: false,
                    title: dbItem[3] + ' [' + dbItem[1] + '; ' + dbItem[2] + ']'
                });
                marker.id = dbItem[0];
                marker.setIcon("https://maps.gstatic.com/mapfiles/ms2/micons/yellow-dot.png");
                return marker;
            }

            MapManager.refreshMap = function() {
                var data = null;
                $.ajax({
                    url: "@Url.Action("GetAllData", "MesoWind", new { area = "EngineeringTools" })",
                    dataType: "json",
                    data: data
                }).done(function(data) {
                    if (clusters)
                        clusters.clearMarkers();
                    var markers = [];

                    for (var i = 0; i < data.length; i++) {
                        var coord = new google.maps.LatLng(data[i][1], data[i][2]);
                        var m = createClusterItem(data[i], coord);
                        markers.push(m);
                    }
                    clusters = new MarkerClusterer(map, markers, {
                        maxZoom: 20,
                        gridSize: null,
                        styles: null
                    });
                });
            };

            MapManager.initialize = function() {
                var mapOptions = {
                    zoom: 1,
                    minZoom: 1,
                    center: centerPoint,
                    mapTypeId: google.maps.MapTypeId.SATELLITE
                };

                //var size = Utils.GetWindowSize();
                //console.debug(size);
                //$("#map_canvas").css("width", size.width);
                //$("#map_canvas").css("height", size.height);

                map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);

                dbMarker = createMarker(new google.maps.LatLng(0, 0));
                dbMarker.setIcon("https://maps.gstatic.com/mapfiles/ms2/micons/yellow-dot.png");
                dbMarker.visible = false;
                dbMarker.zIndex = 1;

                dbHoverMarker = createMarker(new google.maps.LatLng(0, 0));
                dbHoverMarker.setIcon("https://maps.gstatic.com/mapfiles/ms2/micons/ltblue-dot.png");
                dbHoverMarker.visible = false;
                dbHoverMarker.zIndex = 2;

                MapManager.refreshMap();
            };

            MapManager.clearClusters = function(e) {
                e.preventDefault();
                e.stopPropagation();
                clusters.clearMarkers();
            };
        
            /* Get the rows which are currently selected */
            MapManager.fnGetSelected = function(oTableLocal) {
                var aReturn = new Array();
                var aTrs = oTableLocal.fnGetNodes();

                for (var i = 0; i < aTrs.length; i++) {
                    if ($(aTrs[i]).hasClass('table-row-selected')) {
                        aReturn.push(aTrs[i]);
                    }
                }
                return aReturn;
            };

            MapManager.setHover = function(point) {
                dbHoverMarker.setPosition(point);
                dbHoverMarker.title = "";
                dbHoverMarker.visible = true;
                map.setCenter(point);
            };
            MapManager.hideHover = function() {
                dbHoverMarker.visible = false;
            };
        })();

        (function() {
            var dbTable = null;
            var dburl = "@Url.Action("GetDatabasePoints", "MesoWind", new { are = "EngineeringTools" })";

            TableManager.initialize = function() {
                $.extend($.fn.dataTableExt.oStdClasses, {
                    "sSortAsc": "header headerSortDown",
                    "sSortDesc": "header headerSortUp",
                    "sSortable": "header"
                });
                dbTable = $('#database').dataTable({
                    "sDom": "tip<'row-fluid'r>",
                    //"sDom": "lfrtip",
                    "bFilter": false,
                    "bProcessing": true,
                    "bServerSide": true,
                    "sAjaxSource": dburl,
                    "sPaginationType": "bootstrap"
                });

                // Select DB row
                $("#database tbody").click(function(event) {
                    $(dbTable.fnSettings().aoData).each(function() {
                        $(this.nTr).removeClass('table-row-selected');
                    });
                    $(event.target.parentNode).addClass('table-row-selected');

                    var row = $(event.target.parentNode);
                    var lat = $(row.find("td")[0]).text();
                    var lng = $(row.find("td")[1]).text();

                    var point = new google.maps.LatLng(lat, lng);
                    MapManager.setHover(point);
                });
                
                $('#database tbody').on('mouseenter', 'tr', function() {
                    var lat = $($(this).find('td')[0]).text();
                    var lng = $($(this).find('td')[1]).text();
                    var point = new google.maps.LatLng(lat, lng);
                    MapManager.setHover(point);
                }).on('mouseleave', 'tr', function() {
                    MapManager.hideHover();
                });
            };
        })();
        
        $(document).ready(function() {

            MapManager.initialize();
            TableManager.initialize();

            $("#do_import").click(function() {
                var sel = fnGetSelected(dbTable);
                if (sel.length == 0) {
                    return false;
                }
                //var lat = $($(sel[0]).find('td')[0]).text();
                //var lng = $($(sel[0]).find('td')[1]).text();
                var id = $($(sel[0]).find('td')[0]).text();
                $.ajax({
                    url: "@Url.Action("Import", "MesoWind", new { area = "EngineeringTools" })",
                    data: { id: id }
                }).done(function() {
                });
                return false;
            });

            $("input:radio[name=DbType]").change(function() {
            });
        });
    </script>

}
