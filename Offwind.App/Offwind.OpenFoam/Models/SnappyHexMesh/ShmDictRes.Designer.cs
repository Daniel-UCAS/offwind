//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Offwind.Products.OpenFoam.Models.SnappyHexMesh {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ShmDictRes {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ShmDictRes() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Offwind.Products.OpenFoam.Models.SnappyHexMesh.ShmDictRes", typeof(ShmDictRes).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*--------------------------------*- C++ -*----------------------------------*\
        ///| =========                 |                                                 |
        ///| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
        ///|  \\    /   O peration     | Version:  2.0.x                                 |
        ///|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
        ///|    \\/     M anipulation  |                                                 |
        ///\*------------------------------ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Default {
            get {
                return ResourceManager.GetString("Default", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*--------------------------------*- C++ -*----------------------------------*\
        ///| =========                 |                                                 |
        ///| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
        ///|  \\    /   O peration     | Version:  2.1.0                                 |
        ///|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
        ///|    \\/     M anipulation  |                                                 |
        ///\*------------------------ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Template {
            get {
                return ResourceManager.GetString("Template", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Settings for the layer addition.
        ///addLayersControls
        ///{
        ///    // Are the thickness parameters below relative to the undistorted
        ///    // size of the refined cell outside layer (true) or absolute sizes (false).
        ///    relativeSizes ({[[relativeSizes]]});
        ///
        ///    // Per final patch (so not geometry!) the layer information
        ///    layers
        ///    {
        ///        &quot;flange_.*&quot;
        ///        {
        ///            nSurfaceLayers 1;
        ///        }
        ///    }
        ///
        ///    // Expansion factor for layer mesh
        ///    expansionRatio ({[[expansionRatio]]});
        ///
        ///
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TemplateAddLayersControls {
            get {
                return ResourceManager.GetString("TemplateAddLayersControls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Settings for the castellatedMesh generation.
        ///castellatedMeshControls
        ///{
        ///
        ///    // Refinement parameters
        ///    // ~~~~~~~~~~~~~~~~~~~~~
        ///
        ///    // If local number of cells is &gt;= maxLocalCells on any processor
        ///    // switches from from refinement followed by balancing
        ///    // (current method) to (weighted) balancing before refinement.
        ///    maxLocalCells ({[[maxLocalCells]]});
        ///
        ///    // Overall cell limit (approximately). Refinement will stop immediately
        ///    // upon reaching this number so a refinement lev [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TemplateCastellatedMeshControls {
            get {
                return ResourceManager.GetString("TemplateCastellatedMeshControls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Generic mesh quality settings. At any undoable phase these determine
        ///// where to undo.
        ///meshQualityControls
        ///{
        ///    //- Maximum non-orthogonality allowed. Set to 180 to disable.
        ///    maxNonOrtho ({[[maxNonOrtho]]});
        ///
        ///    //- Max skewness allowed. Set to &lt;0 to disable.
        ///    maxBoundarySkewness ({[[maxBoundarySkewness]]});
        ///    maxInternalSkewness ({[[maxInternalSkewness]]});
        ///
        ///    //- Max concaveness allowed. Is angle (in degrees) below which concavity
        ///    //  is allowed. 0 is straight face, &lt;0 would [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TemplateMeshQualityControls {
            get {
                return ResourceManager.GetString("TemplateMeshQualityControls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Settings for the snapping.
        ///snapControls
        ///{
        ///    //- Number of patch smoothing iterations before finding correspondence
        ///    //  to surface
        ///    nSmoothPatch ({[[nSmoothPatch]]});
        ///
        ///    //- Relative distance for points to be attracted by surface feature point
        ///    //  or edge. True distance is this factor times local
        ///    //  maximum edge length.
        ///    tolerance ({[[tolerance]]});
        ///
        ///    //- Number of mesh displacement relaxation iterations.
        ///    nSolveIter ({[[nSolveIter]]});
        ///
        ///    //- Maximum number o [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TemplateSnapControls {
            get {
                return ResourceManager.GetString("TemplateSnapControls", resourceCulture);
            }
        }
    }
}
